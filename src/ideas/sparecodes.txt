          <header className="header">
            <h1>Welcome to MORP</h1>
            <p>Anything I desire can be made reality</p>
            <button className="btn" onClick={handleButtonClick}>Text Editor</button>
          </header>


          from scrastch:
          https://app.videosdk.live/quick-start/conferencing/build-from-scratch/web/react
          https://app.videosdk.live/quick-start/conferencing/build-from-scratch/web/javascript



          demo project:
          https://app.videosdk.live/quick-start/conferencing/clone-example/web/react
          https://app.videosdk.live/quick-start/conferencing/clone-example/web/javascript


          https://app.videosdk.live/quick-start?orgId=R6YA7WZXKLQ0


          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlrZXkiOiJlNzkzOTYyMS0zOTYxLTQ0YzgtOThmZS01MzhhNTQ1YTBiM2MiLCJwZXJtaXNzaW9ucyI6WyJhbGxvd19qb2luIl0sImlhdCI6MTcyNzc2NDYzOCwiZXhwIjoxNzI4MzY5NDM4fQ.lJPfebqVo7p0FuBgqor8jP6_LiEXWTItxlJddeM0DMI

              /**
     * @var string $userId The user ID
     */





import React, { useEffect, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import '../../style/App/TopBar.scss';
import FriendList from './FriendList';
import ServerList from './ServerList';
import ServerCreationForm from './createServerForm'; // Import the form modal component
import JoinServerForm from './joinServer';
import TopBarButton from './TopBarButton';
import UserPanel from './userPanel';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faHome, faAdd, faUser, faUsers, faCompass } from '@fortawesome/free-solid-svg-icons'

const TopBar = ({ onServerClick, LogOut }) => {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isJoinFormOpen, setIsJoinFormOpen] = useState(false);
  const [isUserPanelOpen, setIsUserPanelOpen] = useState(false);
  const [isServersSelected, setIsServersSelected] = useState(true);
  const [profilePicPath, setProfilePicPath] = useState('');
  const topbarRef = useRef(null);

  useEffect(() => {
    const fetchProfilePic = async () => {
      try {
        // Fetch profile picture logic here
      } catch (error) {
        console.error('Error fetching profile picture:', error);
      }
    };

    fetchProfilePic();
  }, []);

  const handleFormOpen = () => {
    setIsFormOpen(true);
  };

  const handleFormClose = () => {
    setIsFormOpen(false);
  };

  const handleJoinFormOpen = () => {
    setIsJoinFormOpen(true);
  };

  const handleJoinFormClose = () => {
    setIsJoinFormOpen(false);
  };

  const handleUserPanelOpen = () => {
    setIsUserPanelOpen(true);
  };

  const handleUserPanelClose = () => {
    setIsUserPanelOpen(false);
  };

  const handleServerClick = (server) => {
    fetchSectionsAndRooms(server.id);
  };

  const fetchSectionsAndRooms = (serverId) => {
    fetch(`http://localhost/morpwebsite-master-1/src/php/getSectionsandRooms.php?server_id=${serverId}`)
      .then(response => response.json())
      .then(data => displaySectionsAndRooms(data))
      .catch(error => console.error('Error:', error));
  };

  const displaySectionsAndRooms = (data) => {
    const container = document.getElementById('sectionsAndRooms');
    container.innerHTML = ''; // Clear previous content

    data.forEach(section => {
      const sectionDiv = document.createElement('div');
      sectionDiv.innerHTML = `<h3>Section: ${section.section_name}</h3>`;
      
      const roomsList = document.createElement('ul');
      if (section.rooms.length > 0) {
        section.rooms.forEach(room => {
          const roomItem = document.createElement('li');
          roomItem.textContent = `Room: ${room.room_name}`;
          roomsList.appendChild(roomItem);
        });
      } else {
        const noRoomsItem = document.createElement('li');
        noRoomsItem.textContent = 'No rooms available';
        roomsList.appendChild(noRoomsItem);
      }

      sectionDiv.appendChild(roomsList);
      container.appendChild(sectionDiv);
    });
  };

  return (
    <div className="topbar">
      <div className='home-list'>
        <TopBarButton icon={<FontAwesomeIcon icon={faHome} />} title="Home" onClick={() => handleServerClick({ id: 1, name: 'Home' })} />
        <TopBarButton icon={<FontAwesomeIcon icon={faAdd} />} title="Add Server" onClick={() => handleFormOpen()} />
        <TopBarButton icon={<FontAwesomeIcon icon={faAdd} />} title="Join" onClick={() => handleJoinFormOpen()} />
      </div>

      <div ref={topbarRef} className="icon-list">
        {
          isServersSelected ? 
          <ServerList onServerClick={handleServerClick} onCreateServerClick={handleFormOpen} /> : 
          <FriendList onFriendClick={() => {}} />
        }
      </div>

      {isFormOpen && <ServerCreationForm onClose={handleFormClose} />}
      {isJoinFormOpen && <JoinServerForm onClose={handleJoinFormClose} />} {/* Render JoinServerForm */}
      {isUserPanelOpen && <UserPanel onClose={handleUserPanelClose} LogOut={LogOut} />}

      <div className='user-list'>
        <TopBarButton 
          icon={<FontAwesomeIcon icon={(isServersSelected ? faCompass : faUsers)} />} 
          title={(isServersSelected ? "Show Friends" : "Show Servers")} 
          onClick={() => setIsServersSelected(!isServersSelected)} 
        />
        <TopBarButton 
          icon={<FontAwesomeIcon icon={faUser} />} 
          title="Profile"  
          onClick={() => handleUserPanelOpen()}
          picPath={`url(http://localhost/morpwebsite-master-1/src/pictureData/userPictures/${profilePicPath})`}
        />
      </div>

      {/* Add the sectionsAndRooms container here */}
      <div id="sectionsAndRooms"></div>
    </div>
  );
};

TopBar.propTypes = {
  onServerClick: PropTypes.func.isRequired,
};

export default TopBar;
     