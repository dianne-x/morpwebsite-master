          <header className="header">
            <h1>Welcome to MORP</h1>
            <p>Anything I desire can be made reality</p>
            <button className="btn" onClick={handleButtonClick}>Text Editor</button>
          </header>


          from scrastch:
          https://app.videosdk.live/quick-start/conferencing/build-from-scratch/web/react
          https://app.videosdk.live/quick-start/conferencing/build-from-scratch/web/javascript



          demo project:
          https://app.videosdk.live/quick-start/conferencing/clone-example/web/react
          https://app.videosdk.live/quick-start/conferencing/clone-example/web/javascript


          https://app.videosdk.live/quick-start?orgId=R6YA7WZXKLQ0


          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlrZXkiOiJlNzkzOTYyMS0zOTYxLTQ0YzgtOThmZS01MzhhNTQ1YTBiM2MiLCJwZXJtaXNzaW9ucyI6WyJhbGxvd19qb2luIl0sImlhdCI6MTcyNzc2NDYzOCwiZXhwIjoxNzI4MzY5NDM4fQ.lJPfebqVo7p0FuBgqor8jP6_LiEXWTItxlJddeM0DMI

              /**
     * @var string $userId The user ID
     */





import React, { useEffect, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import '../../style/App/TopBar.scss';
import FriendList from './FriendList';
import ServerList from './ServerList';
import ServerCreationForm from './createServerForm'; // Import the form modal component
import JoinServerForm from './joinServer';
import TopBarButton from './TopBarButton';
import UserPanel from './userPanel';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faHome, faAdd, faUser, faUsers, faCompass } from '@fortawesome/free-solid-svg-icons'

const TopBar = ({ onServerClick, LogOut }) => {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isJoinFormOpen, setIsJoinFormOpen] = useState(false);
  const [isUserPanelOpen, setIsUserPanelOpen] = useState(false);
  const [isServersSelected, setIsServersSelected] = useState(true);
  const [profilePicPath, setProfilePicPath] = useState('');
  const topbarRef = useRef(null);

  useEffect(() => {
    const fetchProfilePic = async () => {
      try {
        // Fetch profile picture logic here
      } catch (error) {
        console.error('Error fetching profile picture:', error);
      }
    };

    fetchProfilePic();
  }, []);

  const handleFormOpen = () => {
    setIsFormOpen(true);
  };

  const handleFormClose = () => {
    setIsFormOpen(false);
  };

  const handleJoinFormOpen = () => {
    setIsJoinFormOpen(true);
  };

  const handleJoinFormClose = () => {
    setIsJoinFormOpen(false);
  };

  const handleUserPanelOpen = () => {
    setIsUserPanelOpen(true);
  };

  const handleUserPanelClose = () => {
    setIsUserPanelOpen(false);
  };

  const handleServerClick = (server) => {
    fetchSectionsAndRooms(server.id);
  };

  const fetchSectionsAndRooms = (serverId) => {
    fetch(`http://localhost/morpwebsite-master-1/src/php/getSectionsandRooms.php?server_id=${serverId}`)
      .then(response => response.json())
      .then(data => displaySectionsAndRooms(data))
      .catch(error => console.error('Error:', error));
  };

  const displaySectionsAndRooms = (data) => {
    const container = document.getElementById('sectionsAndRooms');
    container.innerHTML = ''; // Clear previous content

    data.forEach(section => {
      const sectionDiv = document.createElement('div');
      sectionDiv.innerHTML = `<h3>Section: ${section.section_name}</h3>`;
      
      const roomsList = document.createElement('ul');
      if (section.rooms.length > 0) {
        section.rooms.forEach(room => {
          const roomItem = document.createElement('li');
          roomItem.textContent = `Room: ${room.room_name}`;
          roomsList.appendChild(roomItem);
        });
      } else {
        const noRoomsItem = document.createElement('li');
        noRoomsItem.textContent = 'No rooms available';
        roomsList.appendChild(noRoomsItem);
      }

      sectionDiv.appendChild(roomsList);
      container.appendChild(sectionDiv);
    });
  };

  return (
    <div className="topbar">
      <div className='home-list'>
        <TopBarButton icon={<FontAwesomeIcon icon={faHome} />} title="Home" onClick={() => handleServerClick({ id: 1, name: 'Home' })} />
        <TopBarButton icon={<FontAwesomeIcon icon={faAdd} />} title="Add Server" onClick={() => handleFormOpen()} />
        <TopBarButton icon={<FontAwesomeIcon icon={faAdd} />} title="Join" onClick={() => handleJoinFormOpen()} />
      </div>

      <div ref={topbarRef} className="icon-list">
        {
          isServersSelected ? 
          <ServerList onServerClick={handleServerClick} onCreateServerClick={handleFormOpen} /> : 
          <FriendList onFriendClick={() => {}} />
        }
      </div>

      {isFormOpen && <ServerCreationForm onClose={handleFormClose} />}
      {isJoinFormOpen && <JoinServerForm onClose={handleJoinFormClose} />} {/* Render JoinServerForm */}
      {isUserPanelOpen && <UserPanel onClose={handleUserPanelClose} LogOut={LogOut} />}

      <div className='user-list'>
        <TopBarButton 
          icon={<FontAwesomeIcon icon={(isServersSelected ? faCompass : faUsers)} />} 
          title={(isServersSelected ? "Show Friends" : "Show Servers")} 
          onClick={() => setIsServersSelected(!isServersSelected)} 
        />
        <TopBarButton 
          icon={<FontAwesomeIcon icon={faUser} />} 
          title="Profile"  
          onClick={() => handleUserPanelOpen()}
          picPath={`url(http://localhost/morpwebsite-master-1/src/pictureData/userPictures/${profilePicPath})`}
        />
      </div>

      {/* Add the sectionsAndRooms container here */}
      <div id="sectionsAndRooms"></div>
    </div>
  );
};

TopBar.propTypes = {
  onServerClick: PropTypes.func.isRequired,
};

export default TopBar;




maybe we could work with the props.id which saves the server's id.

We could take every server's id thats displayed and then look for Server_Member connections with the correct userId(the user thats logged in.)
Then with that we could filter out all the needed Server_Member ids by servers and with the servermember_id in the User_Character we could connect the characters to the corresponding servers

For example:

Server_Member id 1,3,6 correpsond to the user thats logged in. These each have servers attached to them by the server_id. These server the user joined are already displayed, we just need to fill in the characters to the servers.

For example in the User_Character table we have 3 characters for the servermember_id 1, so for that server we load those characters, the all of the other characters for every joined server.



INSERT INTO `server_member` (`id`, `user_id`, `server_id`, `is_owner`, `is_moderator`) VALUES
(1, '2fe88b43124bf5bb3ec1401eef8ac986', 3, 1, 1),
(2, '2fe88b43124bf5bb3ec1401eef8ac986', 4, 1, 1);


so it fetches by the userId.

Is it possible to like create pairs of data?

with userId fetch we create opairs of data that consists of the userId and the serverId that its connected to.

than we could look in the Server_Member table for these pairs and get the ids then look for the ids in the User_Character table servermember_id and with that we could get the characters.

lets rethink this fro the ground up:

we have the userId with the localStorageget
we have all the servers displayed that the user has joined
the serverIds are stored in the props.id for the servers

now I need to displayed the caharcter under the serverd from the User_Character table.

We need to take every displayed server one by one that the user has joined and take their Server_Member table id. With this we can look in the User_Character table for these servermember_id and we can display the characters from there



INSERT INTO `User_Character` (
  `id`, `servermember_id`, `is_verified`, `is_oc`, `character_name`, `nickname`, 
  `gender_id`, `character_pic_path`, `birthdate`, `died`, `deathdate`, 
  `resurrected`, `resurrected_date`, `species_id`, `occupation`, `affilation`, 
  `nationality`, `status_id`, `story_id`, `bio`, `powers`, `weaknesses`, 
  `used_item`, `family`, `universe`, `fc_id`
) VALUES (
  1, 2, 0, 0, 'New Character', NULL, 0, NULL, NULL, 0, NULL, 
  0, NULL, 0, NULL, NULL, NULL, 0, 0, NULL, NULL, NULL, 
  NULL, NULL, NULL, 0
);